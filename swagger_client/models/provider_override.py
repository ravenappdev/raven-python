# coding: utf-8

"""
    Raven API

    This is OpenAPI defintion for the APIs of Raven.  You can find out more about Raven at [https://ravenapp.dev/](https://ravenapp.dev/).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: api@ravenapp.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ProviderOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payload': 'dict(str, object)',
        '_form_params': 'list[Param]',
        '_query_params': 'list[Param]',
        'config': 'dict(str, str)'
    }

    attribute_map = {
        'payload': 'payload',
        '_form_params': 'form_params',
        '_query_params': 'query_params',
        'config': 'config'
    }

    def __init__(self, payload=None, _form_params=None, _query_params=None, config=None, _configuration=None):  # noqa: E501
        """ProviderOverride - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._payload = None
        self.__form_params = None
        self.__query_params = None
        self._config = None
        self.discriminator = None

        if payload is not None:
            self.payload = payload
        if _form_params is not None:
            self._form_params = _form_params
        if _query_params is not None:
            self._query_params = _query_params
        if config is not None:
            self.config = config

    @property
    def payload(self):
        """Gets the payload of this ProviderOverride.  # noqa: E501


        :return: The payload of this ProviderOverride.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ProviderOverride.


        :param payload: The payload of this ProviderOverride.  # noqa: E501
        :type: dict(str, object)
        """

        self._payload = payload

    @property
    def _form_params(self):
        """Gets the _form_params of this ProviderOverride.  # noqa: E501


        :return: The _form_params of this ProviderOverride.  # noqa: E501
        :rtype: list[Param]
        """
        return self.__form_params

    @_form_params.setter
    def _form_params(self, _form_params):
        """Sets the _form_params of this ProviderOverride.


        :param _form_params: The _form_params of this ProviderOverride.  # noqa: E501
        :type: list[Param]
        """

        self.__form_params = _form_params

    @property
    def _query_params(self):
        """Gets the _query_params of this ProviderOverride.  # noqa: E501


        :return: The _query_params of this ProviderOverride.  # noqa: E501
        :rtype: list[Param]
        """
        return self.__query_params

    @_query_params.setter
    def _query_params(self, _query_params):
        """Sets the _query_params of this ProviderOverride.


        :param _query_params: The _query_params of this ProviderOverride.  # noqa: E501
        :type: list[Param]
        """

        self.__query_params = _query_params

    @property
    def config(self):
        """Gets the config of this ProviderOverride.  # noqa: E501


        :return: The config of this ProviderOverride.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ProviderOverride.


        :param config: The config of this ProviderOverride.  # noqa: E501
        :type: dict(str, str)
        """

        self._config = config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProviderOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProviderOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProviderOverride):
            return True

        return self.to_dict() != other.to_dict()
