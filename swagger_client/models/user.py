# coding: utf-8

"""
    Raven API

    This is OpenAPI defintion for the APIs of Raven.  You can find out more about Raven at [https://ravenapp.dev/](https://ravenapp.dev/).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: api@ravenapp.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'mobile': 'str',
        'email': 'str',
        'whatsapp_mobile': 'str',
        'onesignal_external_id': 'str',
        'fcm_tokens': 'list[str]',
        'ios_tokens': 'list[str]',
        'fcm_topic': 'list[str]',
        'fcm_device_group': 'list[str]',
        'slack': 'object',
        'telegram': 'object',
        'onesignal_player_ids': 'list[str]'
    }

    attribute_map = {
        'user_id': 'user_id',
        'mobile': 'mobile',
        'email': 'email',
        'whatsapp_mobile': 'whatsapp_mobile',
        'onesignal_external_id': 'onesignal_external_id',
        'fcm_tokens': 'fcm_tokens',
        'ios_tokens': 'ios_tokens',
        'fcm_topic': 'fcm_topic',
        'fcm_device_group': 'fcm_device_group',
        'slack': 'slack',
        'telegram': 'telegram',
        'onesignal_player_ids': 'onesignal_player_ids'
    }

    def __init__(self, user_id=None, mobile=None, email=None, whatsapp_mobile=None, onesignal_external_id=None, fcm_tokens=None, ios_tokens=None, fcm_topic=None, fcm_device_group=None, slack=None, telegram=None, onesignal_player_ids=None, _configuration=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_id = None
        self._mobile = None
        self._email = None
        self._whatsapp_mobile = None
        self._onesignal_external_id = None
        self._fcm_tokens = None
        self._ios_tokens = None
        self._fcm_topic = None
        self._fcm_device_group = None
        self._slack = None
        self._telegram = None
        self._onesignal_player_ids = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if mobile is not None:
            self.mobile = mobile
        if email is not None:
            self.email = email
        if whatsapp_mobile is not None:
            self.whatsapp_mobile = whatsapp_mobile
        if onesignal_external_id is not None:
            self.onesignal_external_id = onesignal_external_id
        if fcm_tokens is not None:
            self.fcm_tokens = fcm_tokens
        if ios_tokens is not None:
            self.ios_tokens = ios_tokens
        if fcm_topic is not None:
            self.fcm_topic = fcm_topic
        if fcm_device_group is not None:
            self.fcm_device_group = fcm_device_group
        if slack is not None:
            self.slack = slack
        if telegram is not None:
            self.telegram = telegram
        if onesignal_player_ids is not None:
            self.onesignal_player_ids = onesignal_player_ids

    @property
    def user_id(self):
        """Gets the user_id of this User.  # noqa: E501


        :return: The user_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def mobile(self):
        """Gets the mobile of this User.  # noqa: E501


        :return: The mobile of this User.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this User.


        :param mobile: The mobile of this User.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def whatsapp_mobile(self):
        """Gets the whatsapp_mobile of this User.  # noqa: E501


        :return: The whatsapp_mobile of this User.  # noqa: E501
        :rtype: str
        """
        return self._whatsapp_mobile

    @whatsapp_mobile.setter
    def whatsapp_mobile(self, whatsapp_mobile):
        """Sets the whatsapp_mobile of this User.


        :param whatsapp_mobile: The whatsapp_mobile of this User.  # noqa: E501
        :type: str
        """

        self._whatsapp_mobile = whatsapp_mobile

    @property
    def onesignal_external_id(self):
        """Gets the onesignal_external_id of this User.  # noqa: E501


        :return: The onesignal_external_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._onesignal_external_id

    @onesignal_external_id.setter
    def onesignal_external_id(self, onesignal_external_id):
        """Sets the onesignal_external_id of this User.


        :param onesignal_external_id: The onesignal_external_id of this User.  # noqa: E501
        :type: str
        """

        self._onesignal_external_id = onesignal_external_id

    @property
    def fcm_tokens(self):
        """Gets the fcm_tokens of this User.  # noqa: E501


        :return: The fcm_tokens of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._fcm_tokens

    @fcm_tokens.setter
    def fcm_tokens(self, fcm_tokens):
        """Sets the fcm_tokens of this User.


        :param fcm_tokens: The fcm_tokens of this User.  # noqa: E501
        :type: list[str]
        """

        self._fcm_tokens = fcm_tokens

    @property
    def ios_tokens(self):
        """Gets the ios_tokens of this User.  # noqa: E501


        :return: The ios_tokens of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._ios_tokens

    @ios_tokens.setter
    def ios_tokens(self, ios_tokens):
        """Sets the ios_tokens of this User.


        :param ios_tokens: The ios_tokens of this User.  # noqa: E501
        :type: list[str]
        """

        self._ios_tokens = ios_tokens

    @property
    def fcm_topic(self):
        """Gets the fcm_topic of this User.  # noqa: E501


        :return: The fcm_topic of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._fcm_topic

    @fcm_topic.setter
    def fcm_topic(self, fcm_topic):
        """Sets the fcm_topic of this User.


        :param fcm_topic: The fcm_topic of this User.  # noqa: E501
        :type: list[str]
        """

        self._fcm_topic = fcm_topic

    @property
    def fcm_device_group(self):
        """Gets the fcm_device_group of this User.  # noqa: E501


        :return: The fcm_device_group of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._fcm_device_group

    @fcm_device_group.setter
    def fcm_device_group(self, fcm_device_group):
        """Sets the fcm_device_group of this User.


        :param fcm_device_group: The fcm_device_group of this User.  # noqa: E501
        :type: list[str]
        """

        self._fcm_device_group = fcm_device_group

    @property
    def slack(self):
        """Gets the slack of this User.  # noqa: E501


        :return: The slack of this User.  # noqa: E501
        :rtype: object
        """
        return self._slack

    @slack.setter
    def slack(self, slack):
        """Sets the slack of this User.


        :param slack: The slack of this User.  # noqa: E501
        :type: object
        """

        self._slack = slack

    @property
    def telegram(self):
        """Gets the telegram of this User.  # noqa: E501


        :return: The telegram of this User.  # noqa: E501
        :rtype: object
        """
        return self._telegram

    @telegram.setter
    def telegram(self, telegram):
        """Sets the telegram of this User.


        :param telegram: The telegram of this User.  # noqa: E501
        :type: object
        """

        self._telegram = telegram

    @property
    def onesignal_player_ids(self):
        """Gets the onesignal_player_ids of this User.  # noqa: E501


        :return: The onesignal_player_ids of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._onesignal_player_ids

    @onesignal_player_ids.setter
    def onesignal_player_ids(self, onesignal_player_ids):
        """Sets the onesignal_player_ids of this User.


        :param onesignal_player_ids: The onesignal_player_ids of this User.  # noqa: E501
        :type: list[str]
        """

        self._onesignal_player_ids = onesignal_player_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
