# coding: utf-8

"""
    Raven API

    This is OpenAPI defintion for the APIs of Raven.  You can find out more about Raven at [https://ravenapp.dev/](https://ravenapp.dev/).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: api@ravenapp.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EventOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'EmailOverride',
        'sms': 'SmsOverride',
        'whatsapp': 'WhatsappOverride',
        'push': 'PushOverride',
        'webhook': 'WebhookOverride',
        'voice': 'VoiceOverride',
        'slack': 'SlackOverride',
        'telegram': 'TelegramOverride',
        'providers': 'dict(str, ProviderOverride)'
    }

    attribute_map = {
        'email': 'email',
        'sms': 'sms',
        'whatsapp': 'whatsapp',
        'push': 'push',
        'webhook': 'webhook',
        'voice': 'voice',
        'slack': 'slack',
        'telegram': 'telegram',
        'providers': 'providers'
    }

    def __init__(self, email=None, sms=None, whatsapp=None, push=None, webhook=None, voice=None, slack=None, telegram=None, providers=None, _configuration=None):  # noqa: E501
        """EventOverride - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email = None
        self._sms = None
        self._whatsapp = None
        self._push = None
        self._webhook = None
        self._voice = None
        self._slack = None
        self._telegram = None
        self._providers = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if sms is not None:
            self.sms = sms
        if whatsapp is not None:
            self.whatsapp = whatsapp
        if push is not None:
            self.push = push
        if webhook is not None:
            self.webhook = webhook
        if voice is not None:
            self.voice = voice
        if slack is not None:
            self.slack = slack
        if telegram is not None:
            self.telegram = telegram
        if providers is not None:
            self.providers = providers

    @property
    def email(self):
        """Gets the email of this EventOverride.  # noqa: E501


        :return: The email of this EventOverride.  # noqa: E501
        :rtype: EmailOverride
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EventOverride.


        :param email: The email of this EventOverride.  # noqa: E501
        :type: EmailOverride
        """

        self._email = email

    @property
    def sms(self):
        """Gets the sms of this EventOverride.  # noqa: E501


        :return: The sms of this EventOverride.  # noqa: E501
        :rtype: SmsOverride
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """Sets the sms of this EventOverride.


        :param sms: The sms of this EventOverride.  # noqa: E501
        :type: SmsOverride
        """

        self._sms = sms

    @property
    def whatsapp(self):
        """Gets the whatsapp of this EventOverride.  # noqa: E501


        :return: The whatsapp of this EventOverride.  # noqa: E501
        :rtype: WhatsappOverride
        """
        return self._whatsapp

    @whatsapp.setter
    def whatsapp(self, whatsapp):
        """Sets the whatsapp of this EventOverride.


        :param whatsapp: The whatsapp of this EventOverride.  # noqa: E501
        :type: WhatsappOverride
        """

        self._whatsapp = whatsapp

    @property
    def push(self):
        """Gets the push of this EventOverride.  # noqa: E501


        :return: The push of this EventOverride.  # noqa: E501
        :rtype: PushOverride
        """
        return self._push

    @push.setter
    def push(self, push):
        """Sets the push of this EventOverride.


        :param push: The push of this EventOverride.  # noqa: E501
        :type: PushOverride
        """

        self._push = push

    @property
    def webhook(self):
        """Gets the webhook of this EventOverride.  # noqa: E501


        :return: The webhook of this EventOverride.  # noqa: E501
        :rtype: WebhookOverride
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this EventOverride.


        :param webhook: The webhook of this EventOverride.  # noqa: E501
        :type: WebhookOverride
        """

        self._webhook = webhook

    @property
    def voice(self):
        """Gets the voice of this EventOverride.  # noqa: E501


        :return: The voice of this EventOverride.  # noqa: E501
        :rtype: VoiceOverride
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this EventOverride.


        :param voice: The voice of this EventOverride.  # noqa: E501
        :type: VoiceOverride
        """

        self._voice = voice

    @property
    def slack(self):
        """Gets the slack of this EventOverride.  # noqa: E501


        :return: The slack of this EventOverride.  # noqa: E501
        :rtype: SlackOverride
        """
        return self._slack

    @slack.setter
    def slack(self, slack):
        """Sets the slack of this EventOverride.


        :param slack: The slack of this EventOverride.  # noqa: E501
        :type: SlackOverride
        """

        self._slack = slack

    @property
    def telegram(self):
        """Gets the telegram of this EventOverride.  # noqa: E501


        :return: The telegram of this EventOverride.  # noqa: E501
        :rtype: TelegramOverride
        """
        return self._telegram

    @telegram.setter
    def telegram(self, telegram):
        """Sets the telegram of this EventOverride.


        :param telegram: The telegram of this EventOverride.  # noqa: E501
        :type: TelegramOverride
        """

        self._telegram = telegram

    @property
    def providers(self):
        """Gets the providers of this EventOverride.  # noqa: E501


        :return: The providers of this EventOverride.  # noqa: E501
        :rtype: dict(str, ProviderOverride)
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this EventOverride.


        :param providers: The providers of this EventOverride.  # noqa: E501
        :type: dict(str, ProviderOverride)
        """

        self._providers = providers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventOverride):
            return True

        return self.to_dict() != other.to_dict()
