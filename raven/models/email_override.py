# coding: utf-8

"""
    Raven API

    This is OpenAPI defintion for the APIs of Raven.  You can find out more about Raven at [https://ravenapp.dev/](https://ravenapp.dev/).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: api@ravenapp.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from raven.configuration import Configuration


class EmailOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'EmailRecipient',
        'cc': 'list[EmailRecipient]',
        'bcc': 'list[EmailRecipient]',
        'attachments': 'Attachments',
        'schedule_at': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'cc': 'cc',
        'bcc': 'bcc',
        'attachments': 'attachments',
        'schedule_at': 'schedule_at'
    }

    def __init__(self, _from=None, cc=None, bcc=None, attachments=None, schedule_at=None, _configuration=None):  # noqa: E501
        """EmailOverride - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__from = None
        self._cc = None
        self._bcc = None
        self._attachments = None
        self._schedule_at = None
        self.discriminator = None

        if _from is not None:
            self._from = _from
        if cc is not None:
            self.cc = cc
        if bcc is not None:
            self.bcc = bcc
        if attachments is not None:
            self.attachments = attachments
        if schedule_at is not None:
            self.schedule_at = schedule_at

    @property
    def _from(self):
        """Gets the _from of this EmailOverride.  # noqa: E501


        :return: The _from of this EmailOverride.  # noqa: E501
        :rtype: EmailRecipient
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EmailOverride.


        :param _from: The _from of this EmailOverride.  # noqa: E501
        :type: EmailRecipient
        """

        self.__from = _from

    @property
    def cc(self):
        """Gets the cc of this EmailOverride.  # noqa: E501


        :return: The cc of this EmailOverride.  # noqa: E501
        :rtype: list[EmailRecipient]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this EmailOverride.


        :param cc: The cc of this EmailOverride.  # noqa: E501
        :type: list[EmailRecipient]
        """

        self._cc = cc

    @property
    def bcc(self):
        """Gets the bcc of this EmailOverride.  # noqa: E501


        :return: The bcc of this EmailOverride.  # noqa: E501
        :rtype: list[EmailRecipient]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this EmailOverride.


        :param bcc: The bcc of this EmailOverride.  # noqa: E501
        :type: list[EmailRecipient]
        """

        self._bcc = bcc

    @property
    def attachments(self):
        """Gets the attachments of this EmailOverride.  # noqa: E501


        :return: The attachments of this EmailOverride.  # noqa: E501
        :rtype: Attachments
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this EmailOverride.


        :param attachments: The attachments of this EmailOverride.  # noqa: E501
        :type: Attachments
        """

        self._attachments = attachments

    @property
    def schedule_at(self):
        """Gets the schedule_at of this EmailOverride.  # noqa: E501


        :return: The schedule_at of this EmailOverride.  # noqa: E501
        :rtype: str
        """
        return self._schedule_at

    @schedule_at.setter
    def schedule_at(self, schedule_at):
        """Sets the schedule_at of this EmailOverride.


        :param schedule_at: The schedule_at of this EmailOverride.  # noqa: E501
        :type: str
        """

        self._schedule_at = schedule_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailOverride):
            return True

        return self.to_dict() != other.to_dict()
